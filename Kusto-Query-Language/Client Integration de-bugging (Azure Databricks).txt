The following KQL queries will be working against Azure Databricks to pull out Integration specific data about client/s.
We will use Tesla as sample client example and changed up naming converntions for data privacy purposes.

Query 1
Distinct Tesla request_Uris string 
- This will pull out all the distinct strings including Tesla and pre-defined substring. This can help determine 
  investigation direction.

Query 2
Tesla APIhealthCheck call
- This query will test the live API essentially checking if it is working or not where we can visualize categorized API 
  response codes. The next part of client integration data can then be pulled out. 
  This is important for de-bugging potential timeouts and other areas of integration networks.

Query 3 
Tesla GetMarketData call
- Check client specific market data calls against the API. Visualize this data (same as above). The KQL query and above can
  be changed up according to investigation/de-bugging requirements.

Query 4
Tesla RequestPriceByAUXcode call
- This will pull out response codes of this particular type of pricing requirements. This can also be changed up to drill into
  certain area's of infastructure via Azure Databricks.

------------------------------------------------------------------------------------------------------------------------------------------
// Distinct Tesla request_Uris string 
AzureDiagnostics 
| where ResourceProvider == "MICROSOFT.NETWORK" and Category == "FrontdoorAccessLog"
| where request_Uris contains "Tesla"
| where TimeGenerated between (datetime(2023-11-15 00:00:00) .. datetime(2023-11-22 00:00:00))
| distinct substring(request_Uris, indexof(request_Uris,"http"),70)
------------------------------------------------------------------------------------------------------------------------------------------
// Tesla APIhealthCheck 
AzureDiagnostics 
| where ResourceProvider == "MICROSOFT.NETWORK" and Category == "FrontdoorAccessLog"
| where request_Uris contains "Tesla" and request_Uris contains 'APIhealthCheck'
| extend StatusCode = iif(toint(httpStatusCode_s) == 200, "Success", "Timeout")
| summarize Success = countif(StatusCode == "Success"), Timeout = countif(StatusCode == "Timeout") by bin (TimeGenerated, 5m)
| where TimeGenerated between (datetime(2023-11-11 13:00:00) .. datetime(2023-11-11 15:00:00))
| project TimeGenerated, Success, Timeout
| render columnchart  
-------------------------------------------------------------------------------------------------------------------------------------------
// Tesla GetMarketData 
AzureDiagnostics 
| where ResourceProvider == "MICROSOFT.NETWORK" and Category == "FrontdoorAccessLog"
| where request_Uris contains "Tesla" and request_Uris contains 'GetMarketData'
| extend StatusCode = iif(toint(httpStatusCode_s) == 200, "Success", "Timeout")
| summarize Success = countif(StatusCode == "Success"), Timeout = countif(StatusCode == "Timeout") by bin (TimeGenerated, 5m)
| where TimeGenerated between (datetime(2023-11-11 13:00:00) .. datetime(2023-11-11 15:00:00))
| project TimeGenerated, Success, Timeout
| render columnchart  
-------------------------------------------------------------------------------------------------------------------------------------------
// Tesla RequestPriceByAUXcode 
AzureDiagnostics 
| where ResourceProvider == "MICROSOFT.NETWORK" and Category == "FrontdoorAccessLog"
| where request_Uris contains "Tesla" and request_Uris contains 'RequestPriceByAUXcode'
| extend StatusCode = iif(toint(httpStatusCode_s) == 200, "Success", "Timeout")
| summarize Success = countif(StatusCode == "Success"), Timeout = countif(StatusCode == "Timeout") by bin (TimeGenerated, 5m)
| where TimeGenerated between (datetime(2023-11-11 13:00:00) .. datetime(2023-11-11 15:00:00))
| project TimeGenerated, Success, Timeout
| render columnchart  
-------------------------------------------------------------------------------------------------------------------------------------------

